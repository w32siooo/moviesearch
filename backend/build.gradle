import static org.gradle.api.JavaVersion.VERSION_13
import static org.gradle.api.JavaVersion.current

plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java-library'
    id 'groovy'
    id 'java'
    id 'jacoco'
}
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}
group = 'cygni.denmark'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.3'
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    repositories {
        mavenCentral()
    }
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.3'
            mavenBom 'org.springframework.boot:spring-boot-starter-parent:2.7.0'
        }
    }
}

allprojects {
    apply plugin: 'groovy'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    dependencies {
        compileOnly(group: 'org.projectlombok', name: 'lombok')
        annotationProcessor 'org.projectlombok:lombok'
    }
}
dependencies {
    implementation 'com.h2database:h2:2.1.214'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.5'
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.12'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    testImplementation 'io.projectreactor.tools:blockhound:1.0.6.RELEASE'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.13'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.3-groovy-3.0'
    implementation group: 'io.netty', name: 'netty-resolver-dns-native-macos', version: '4.1.84.Final', classifier: 'osx-aarch_64'
    testCompileOnly group: 'org.projectlombok', name: 'lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    implementation project(':moviesearch-component-persistence')
    implementation project(':moviesearch-component-search')
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.4'
    implementation 'org.postgresql:postgresql:42.5.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    testImplementation "org.testcontainers:elasticsearch:1.17.5"
}

project(':moviesearch-component-search') {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

    }
}

project(':moviesearch-component-persistence') {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.5'

    }
}


test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()
    }
}
tasks.withType(Test).all {
    if (current().isCompatibleWith(VERSION_13)) {
        jvmArgs += ['-XX:+AllowRedefinitionToAddDeleteMethods']
    }
}
jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/commands/**', '**/models/**', '**/dtos/**', '**/RockpaperApplication.*'])
        }))
    }
    dependsOn test // tests are required to run before generating the report
}

